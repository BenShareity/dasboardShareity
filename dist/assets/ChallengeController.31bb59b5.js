import{S as r}from"./ServerCall.bf212017.js";import{u as a}from"./session.f47d2680.js";a();const c={getAll:async()=>{try{return(await r.get("/challenge/get-all")).data}catch(e){throw e}},getById:async e=>{try{return(await r.get(`/challenge/get-by-id/${e}`)).data}catch(t){throw t}},getChallenges:async e=>{try{return(await r.get(`/challenge/get-challenge/${e}`)).data}catch(t){throw t}},getChallengesStats:async e=>{try{const t=await r.get(`/stats/challenge/${e}`);return console.log("response-stats",t.data),t.data}catch(t){throw t}},getChallengesUpdate:async e=>{try{const t=await r.get(`/user-challenge/get-by-id/dashboard/${e}`)}catch(t){throw t}},getUrlChallengeShared:async e=>{try{return(await r.post("/stats/Challenge/GetShare/",{challengeId:e,platform:["twilio"]})).data}catch(t){throw t}},getUrlUserChallengeShared:async e=>{try{return(await r.post("/stats/UserChallenge/GetShare/",{userChallengeId:e,platform:["twilio"]})).data}catch(t){throw t}},createChallenge:async e=>{try{const t=await r.post("/challenge/create",{idUsrCreate:e.idUsrCreate,name:e.name,description:e.description,startDate:e.startDate,endDate:e.endDate,amount:e.amount,inviteDonate:e.inviteDonate,maxAmount:e.maxAmount,lightbeatStartDate:e.lightbeatStartDate,lightbeatEndDate:e.lightbeatEndDate,lightbeatDesign:e.lightbeatDesign,shareMessage:e.shareMessage,shareMessageShort:e.shareMessageShort,reactions:e.reactions,color:e.color,badge:e.badge,url:e.url,qrUrl:e.customQr,instructions:e.instructions,idOrganization:e.idOrganization,idSponsor:e.idSponsor,idAnimation:e.idAnimation,idResource:e.idResource,typeDonation:e.typeDonation,typeDonationDescription:e.typeDonationDescription,typeDonationIcon:e.typeDonationIcon});return console.log(t.data),t.data}catch(t){throw t}},updateChallenge:async(e,t)=>{try{const s=await r.post(`/challenge/update/${e}`,t);return console.log("data del update",s.data),s.data}catch(s){throw s}},create:async e=>{try{const t=await r.post("/challenge",e);return console.log("Create challenge swiper",t.data),t.data}catch(t){throw t}},update:async(e,t)=>{try{const s=await r.put(`/challenge/${e}`,t);return console.log("Update challenge swiper",s.data),s.data}catch(s){throw s}},createThumbnail:async e=>{try{return await r.postMedia("/challenge/create-thumbnail",e).then(s=>(console.log("CORRECTO: ",s.data),s.data))}catch(t){throw t}},changeStatus:async(e,t)=>{try{return await r.put(`/challenge/${e}/status`,{status:t})}catch(s){throw s}},getUserChallenge:async e=>{try{return await r.post("/user-challenge/get",{idUser:e,items:100})}catch(t){throw t}},getChallengeDashboard:async e=>{try{return(await r.get(`/dashboard/challenges/paginated?items=${e.items}`)).data}catch(t){throw t}},getData:async e=>{try{return(await r.get(`/organization?search=${e.search}`)).data}catch(t){throw t}},getMyChallengesNumber:async()=>{try{return(await r.get("/dashboard/challenges/without/number/assigned")).data}catch(e){throw e}},generateQrCode:async e=>{try{return(await r.get(`/challenge/generate-qr/${e}`)).data}catch(t){throw t}},challengeCredits:async e=>{try{return(await r.post(`/community/administrative_costs/challenge/${e}`)).data}catch(t){throw t}}};export{c as C};
